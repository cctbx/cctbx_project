# Script for building CCTBX
# linux image descriptions
# https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2204-Readme.md
#
# Parameters:
#   distribution: centos, rockylinux, ubuntu
#   version: [6, 10]
#   modules: <modules artifact name>
#   template: <build template file>
#   prefix: <build artifact prefix>

jobs:
- job: ${{ format('{0}_{1}', replace(parameters.distribution, 'cctbx/', ''), join('_', parameters.version) ) }}
  pool:
    vmImage: ubuntu-latest
  timeoutInMinutes: 180
  strategy:
    maxParallel: 2
    matrix:
      python2.7:
        CONDA: Linux
        OS: linux-64
        PYTHON_VERSION: py27
        MODULES: ${{ parameters.modules }}
      python3.9:
        CONDA: Linux
        OS: linux-64
        PYTHON_VERSION: py39
        MODULES: ${{ parameters.modules }}
      python3.10:
        CONDA: Linux
        OS: linux-64
        PYTHON_VERSION: py310
        MODULES: ${{ parameters.modules }}
      python3.11:
        CONDA: Linux
        OS: linux-64
        PYTHON_VERSION: py311
        MODULES: ${{ parameters.modules }}
      python3.12:
        CONDA: Linux
        OS: linux-64
        PYTHON_VERSION: py312
        MODULES: ${{ parameters.modules }}
      python3.13:
        CONDA: Linux
        OS: linux-64
        PYTHON_VERSION: py313
        MODULES: ${{ parameters.modules }}

  container:
    image: ${{ parameters.distribution }}:${{ join('.', parameters.version) }}
    options: "--name ci-container -v /usr/bin/docker:/tmp/docker:ro"

  variables:
    - name: artifact_name
      value: ${{ parameters.prefix }}${{ replace(parameters.distribution, 'cctbx/', '') }}_${{ join('.', parameters.version) }}_$(PYTHON_VERSION)
    - name: day
      value: $(Get-Date -Format dddd)

  steps:
  - script: |
      job_name=`echo $(Agent.JobName) | sed s/" "/"_"/g`
      echo "##vso[task.setvariable variable=job_name]$job_name"
    displayName: Set job_name

  - script: |
      day=`date +%A`
      echo $(day)
      echo "##vso[task.setVariable variable=day]$day"
    displayName: Get day of week

  - script: |
      echo $(job_name)
      echo $(day)
    displayName: Check variables

  # https://github.com/ApexAI/performance_test/blob/master/azure-pipelines.yml#L9-L17

  # centos setup
  - script: |
      sudo yum groupinstall -y 'Development Tools'
      sudo yum install -y mesa-libGLU-devel mesa-libGL-devel tcsh \
        libX11 \
        libXext \
        libXrender \
        libXau \
        alsa-lib \
        firefox \
        gtk2 \
        libXcomposite \
        libXcursor \
        libXi \
        libXrandr \
        pciutils \
        libXScrnSaver \
        libXtst \
        libXdamage \
        libXfixes \
        libXxf86vm \
        wget \
        xorg-x11-server-Xvfb
    displayName: Install dependencies for CentOS
    condition: or(eq('${{ parameters.distribution }}', 'cctbx/centos'),
                  eq('${{ parameters.distribution }}', 'cctbx/rockylinux'))

  - script: |
      sudo yum install -y gtkmm24
    displayName: Install dependencies for CentOS 7 and Rocky Linux 8
    condition: and(or(eq('${{ parameters.distribution }}', 'cctbx/centos'),
                      eq('${{ parameters.distribution }}', 'cctbx/rockylinux')),
                   ne('${{ parameters.version[0] }}', 9))

  - script: |
      sudo yum install -y glibc-langpack-en gtkmm30
    displayName: Install dependencies for Rocky Linux 9
    condition: and(eq('${{ parameters.distribution }}', 'cctbx/rockylinux'),
                   eq('${{ parameters.version[0] }}', 9))

  - bash: |
      echo "##vso[task.setvariable variable=LC_ALL]C.utf8"
    displayName: Setup locale for Rocky Linux 8
    condition: eq('${{ parameters.version[0] }}', 8)

  # ubuntu setup
  - script: |
      /tmp/docker exec -t -u 0 ci-container \
      sh -c "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confold" -y install sudo"
    displayName: Set up sudo for Ubuntu
    condition: eq('${{ parameters.distribution }}', 'ubuntu')

  - script: |
      export DEBIAN_FRONTEND=noninteractive
      sudo --preserve-env=DEBIAN_FRONTEND apt-get install -y \
        build-essential \
        curl \
        firefox \
        git \
        libgl1-mesa-dev \
        libglu1-mesa-dev \
        libxcomposite-dev \
        libxss1 \
        locales \
        pciutils \
        subversion \
        unzip \
        wget
      sudo locale-gen en_US.UTF-8
      sudo update-locale
    displayName: Install dependencies for Ubuntu
    condition: eq('${{ parameters.distribution }}', 'ubuntu')

  - script: |
      echo $(System.CollectionId)
      echo $(System.CollectionUri)
      echo $(System.TeamProject)
      echo $(System.TeamProjectId)
      echo $(System.DefinitionID)
    displayName: Show System variables

  # download daily cached build directory for builds
  # always do builds from scratch for "Update build cache" on Saturday night (Pacific)
  # always do builds from scratch for "Weekly" pipeline
  - task: DownloadPipelineArtifact@2
    inputs:
      source: 'specific'
      project: '$(resources.pipeline.build_cache.projectID)'
      pipeline: '$(resources.pipeline.build_cache.pipelineID)'
      allowPartiallySucceededBuilds: true
      allowFailedBuilds: true
      artifact: '$(artifact_name)'
      path: $(Pipeline.Workspace)
    displayName: Download cached build
    condition: >
      and(or(and(eq(variables['Build.DefinitionName'], 'Update build cache'),
                 ne(variables['day'], 'Sunday')),
             eq(variables['Build.DefinitionName'], 'CI'),
             eq(variables['Build.DefinitionName'], 'CI branch'),
             eq(variables['Build.DefinitionName'], 'XFEL CI'),
             eq(variables['Build.DefinitionName'], 'XFEL CI branch'),
             eq(variables['Build.DefinitionName'], 'Full')),
          ne(variables['SKIP_CACHED_BUILD'], 'true'))
    continueOnError: true

  - script: |
      cd $(Pipeline.Workspace)
      tar -xf build.tar
    displayName: Extract build tarball
    condition: >
      and(or(and(eq(variables['Build.DefinitionName'], 'Update build cache'),
                 ne(variables['day'], 'Sunday')),
             eq(variables['Build.DefinitionName'], 'CI'),
             eq(variables['Build.DefinitionName'], 'CI branch'),
             eq(variables['Build.DefinitionName'], 'XFEL CI'),
             eq(variables['Build.DefinitionName'], 'XFEL CI branch'),
             eq(variables['Build.DefinitionName'], 'Full')),
          ne(variables['SKIP_CACHED_BUILD'], 'true'))
    continueOnError: true
    failOnStderr: false

  # build
  - template: ${{ parameters.template }}
    parameters:
      distribution: ${{ parameters.distribution }}
      version: ${{ parameters.version }}

  # preserve permissions
  - script: |
      cd $(Pipeline.Workspace)
      mkdir -p build
      tar -chf build.tar build
    displayName: Build tarball
    condition: >
      and(eq(variables['Build.DefinitionName'], 'Update build cache'),
          or(eq(variables['Build.Reason'], 'Schedule'),
             eq(variables['Build.Reason'], 'Manual')),
          eq(variables['System.StageAttempt'], 1),
          eq('${{ parameters.modules }}', 'modules'))
    continueOnError: true

  # cache build directory every week for regular optimization build
  - publish: $(Pipeline.Workspace)/build.tar
    artifact: $(artifact_name)
    condition: >
      and(eq(variables['Build.DefinitionName'], 'Update build cache'),
          or(eq(variables['Build.Reason'], 'Schedule'),
             eq(variables['Build.Reason'], 'Manual')),
          eq(variables['System.StageAttempt'], 1),
          eq('${{ parameters.modules }}', 'modules'))
    continueOnError: true
