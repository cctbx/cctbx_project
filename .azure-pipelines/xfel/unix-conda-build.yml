# Script for building CCTBX on linux and macOS
#
# Variables:
#   CONDA: Linux, MacOSX
#   OS: linux, macos
#   PYTHON_VERSION: py311

steps:

# download components
- checkout: none

- task: DownloadPipelineArtifact@2
  displayName: Download modules tarball
  inputs:
    source: 'current'
    artifact: xfel_modules
    path: $(Pipeline.Workspace)

- script: |
    cd $(Pipeline.Workspace)
    tar -xf modules.tar
    rm modules.tar
    rm modules/ls49_big_data/adse13_228/exap_0.hdf5
    rm modules/ls49_big_data/adse13_196/reference/step5_MPIbatch_000*.img.gz
  displayName: Extract modules tarball

- script: |
    cd $(Pipeline.Workspace)
    ln -s modules/cctbx_project/libtbx/auto_build/bootstrap.py
  displayName: Link bootstrap.py

# install miniforge
- task: DownloadPipelineArtifact@2
  inputs:
    source: 'specific'
    project: '$(resources.pipeline.data_cache.projectID)'
    pipeline: '$(resources.pipeline.data_cache.pipelineID)'
    artifact: 'miniforge'
    path: $(Pipeline.Workspace)/miniforge
  displayName: Download miniforge

- script: |
    set -xe
    bash $(Pipeline.Workspace)/miniforge/Miniforge3-$(CONDA)-x86_64.sh -b -u -p $(Pipeline.Workspace)/miniforge
  displayName: Install miniforge

- script: |
    set -xe
    source $(Pipeline.Workspace)/miniforge/etc/profile.d/conda.sh
    conda update -y -n base -c conda-forge conda
  displayName: Update to latest conda

- script: |
    set -xe
    source $(Pipeline.Workspace)/miniforge/etc/profile.d/conda.sh
    conda create -y -n $(PYTHON_VERSION) --file $(Pipeline.Workspace)/modules/dials/.conda-envs/$(OS).txt python=$(PYTHON_FULL_VERSION)
    conda install -y -c conda-forge --no-deps -n $(PYTHON_VERSION) junit-xml
    conda install -y -c conda-forge cmake make pandas distro -n $(PYTHON_VERSION)
  displayName: Create conda environment
  retryCountOnTaskFailure: 3

- script: |
    set -xe
    source $(Pipeline.Workspace)/miniforge/etc/profile.d/conda.sh
    conda env update -n $(PYTHON_VERSION) --file=$(Pipeline.Workspace)/modules/cctbx_project/xfel/conda_envs/ml.yml
  displayName: Create conda environment
  condition: eq('${{ parameters.distribution }}', 'centos')

# build
- script: |
    set -xe
    source $(Pipeline.Workspace)/miniforge/etc/profile.d/conda.sh
    conda activate $(PYTHON_VERSION)
    cd $(Pipeline.Workspace)
    rm -rf modules/boost
    export KOKKOS_ARCH=HSW
    export KOKKOS_DEVICES=OpenMP
    if [ "$(OS)" = "macos" ]; then
      export KOKKOS_DEVICES=Serial
    fi
    python bootstrap.py \
      --builder=xfel \
      --use-conda $CONDA_PREFIX \
      --nproc=4 \
      --config-flags="--enable_openmp_if_possible=True" \
      --config-flags="--compiler=conda" \
      --config-flags="--use_environment_flags" \
      --config-flags="--no_bin_python" \
      --config-flags="--enable_kokkos" \
      --no-boost-src \
      build
    if [ "$(OS)" = "linux" ]; then
      cd build
      source conda_setpaths.sh
      libtbx.configure lunus
      make
    fi
    rm -fr modules/kokkos/.git/*
  displayName: Configure and Build

# test
- script: |
    source $(Pipeline.Workspace)/miniforge/etc/profile.d/conda.sh
    conda activate $(PYTHON_VERSION)
    cd $(Pipeline.Workspace)
    source ./build/setpaths.sh
    mkdir tests
    cd tests
    libtbx.configure xfel_regression LS49 ls49_big_data
    chmod +x $(Pipeline.Workspace)/modules/xfel_regression/merging_test_data/xfel_merge.sh
    chmod +x $(Pipeline.Workspace)/modules/xfel_regression/merging_test_data/merge_thermo.csh
    export OMP_NUM_THREADS=2
    export OMPI_MCA_mca_base_component_show_load_errors=0 # see open-mpi/ompi#7752
    libtbx.run_tests_parallel module=uc_metrics module=simtbx module=xfel_regression module=LS49 nproc=2
  failOnStderr: false
  displayName: Test

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '$(Pipeline.Workspace)/tests/output.xml'
