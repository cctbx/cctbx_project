# Script for building CCTBX
# macOS image descriptions
# https://github.com/actions/virtual-environments/blob/master/images/macos/macos-10.15-Readme.md
# https://github.com/Microsoft/azure-pipelines-image-generation/blob/master/images/macos/macos-10.14-Readme.md
#
# Parameters:
#   vmImage: [10, 15]  # macOs version
#   xcode_version: [12, 4]  # xCode version
#   modules: <modules artifact name>
#   template: <build template file>
#   prefix: <build artifact prefix>

jobs:
- job: ${{ format('{0}_{1}', format('macOS_{0}', join('_', parameters.vmImage)), format('xcode_{0}', join('_', parameters.xcode_version)) ) }}
  pool:
    vmImage: ${{ format('macOS-{0}', join('.', parameters.vmImage)) }}
  timeoutInMinutes: 180
  strategy:
    maxParallel: 2
    matrix:
      python3.11:
        CONDA: MacOSX
        OS: macos
        PYTHON_VERSION: py311
        PYTHON_FULL_VERSION: 3.11
        MODULES: ${{ parameters.modules }}

  variables:
    artifact_name: ${{ parameters.prefix }}${{ format('xcode_{0}', join('_', parameters.xcode_version))  }}_$(PYTHON_VERSION)
    day: $(Get-Date -Format dddd)

  steps:
  - powershell: |
      Write-Host $(day)
      Write-Host "##vso[task.setVariable variable=day]$(day)"
    displayName: Get day of week

  - script: echo $(day)
    displayName: Check day of week

  - script: |
      echo "Selecting Xcode version ${{ join('.', parameters.xcode_version) }}"
      sudo xcode-select --switch /Applications/Xcode_${{ join('.', parameters.xcode_version) }}.app/Contents/Developer
    displayName: Select Xcode version

  - script: |
      echo "Removing homebrew from Azure to avoid conflicts."
      curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall.sh > ~/uninstall_homebrew
      chmod +x ~/uninstall_homebrew
      ~/uninstall_homebrew -f -q
      rm ~/uninstall_homebrew
    displayName: Remove homebrew

  # download daily cached build directory for builds
  # always do builds from scratch for "Update build cache" on Saturday night (Pacific)
  # always do builds from scratch for "Weekly" pipeline
  - task: DownloadPipelineArtifact@2
    inputs:
      source: 'specific'
      project: '$(resources.pipeline.build_cache.projectID)'
      pipeline: '$(resources.pipeline.build_cache.pipelineID)'
      allowPartiallySucceededBuilds: true
      allowFailedBuilds: true
      artifact: '$(artifact_name)'
      path: $(Pipeline.Workspace)
    displayName: Download cached build
    condition: >
      and(or(and(eq(variables['Build.DefinitionName'], 'Update build cache'),
                 ne(variables['day'], 'Sunday')),
             eq(variables['Build.DefinitionName'], 'CI'),
             eq(variables['Build.DefinitionName'], 'CI branch'),
             eq(variables['Build.DefinitionName'], 'XFEL CI'),
             eq(variables['Build.DefinitionName'], 'XFEL CI branch'),
             eq(variables['Build.DefinitionName'], 'Full')),
          ne(variables['SKIP_CACHED_BUILD'], 'true'))
    continueOnError: true

  - script: |
      cd $(Pipeline.Workspace)
      tar -xf build.tar
    displayName: Extract build tarball
    condition: >
      and(or(and(eq(variables['Build.DefinitionName'], 'Update build cache'),
                 ne(variables['day'], 'Sunday')),
             eq(variables['Build.DefinitionName'], 'CI'),
             eq(variables['Build.DefinitionName'], 'CI branch'),
             eq(variables['Build.DefinitionName'], 'XFEL CI'),
             eq(variables['Build.DefinitionName'], 'XFEL CI branch'),
             eq(variables['Build.DefinitionName'], 'Full')),
          ne(variables['SKIP_CACHED_BUILD'], 'true'))
    continueOnError: true
    failOnStderr: false

  - script: |
      set -xe
      for f in cctbx_geometry_restraints_ext.so scitbx_array_family_flex_ext.so ; do
        rm -f $(Pipeline.Workspace)/build/lib/${f}
      done
    displayName: Fix broken cache on macOS
    continueOnError: true
    failOnStderr: false

  # build
  - template: ${{ parameters.template }}

  # preserve permissions
  - script: |
      cd $(Pipeline.Workspace)
      tar -chf build.tar build
    displayName: Build tarball
    condition: >
      and(eq(variables['Build.DefinitionName'], 'Update build cache'),
          or(eq(variables['Build.Reason'], 'Schedule'),
             eq(variables['Build.Reason'], 'Manual')),
          eq(variables['System.StageAttempt'], 1),
          eq('${{ parameters.modules }}', 'xfel_modules'))
    continueOnError: true

  # cache build directory every week for regular optimization build
  - publish: $(Pipeline.Workspace)/build.tar
    artifact: $(artifact_name)
    condition: >
      and(eq(variables['Build.DefinitionName'], 'Update build cache'),
          or(eq(variables['Build.Reason'], 'Schedule'),
             eq(variables['Build.Reason'], 'Manual')),
          eq(variables['System.StageAttempt'], 1),
          eq('${{ parameters.modules }}', 'xfel_modules'))
    continueOnError: true
